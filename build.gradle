buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

def root = project.projectDir.parentFile

apply plugin: 'forge'

def mod_file = getModFile()
version = getVersion("version", mod_file)
//version = "0.1.0"
group= "sekcanimations" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "sekcanims"

minecraft {
    version = "1.7.10-10.13.0.1160"
    runDir = "eclipse"
}


jar {
}

dependencies {
    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"
      
    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

String getModFile() {
    String path = "";
    FileTree tree = fileTree(dir: 'src/main/java')
    tree.include '**/*.java'
    tree.visit {element ->
        if (element.file.isFile()) {
            element.file.eachLine { String s ->
                s = s.trim();
                if (s.startsWith("@Mod")) {
                    path = "src/main/java/$element.relativePath"
                }
            }
        }
    }
    return path;
}

String getVersion(String type, String mod_file) {
    String major = "0";
    String revision = "0";
    String patch = "0";
    String prefix = "public static final String $type = \"";
    File file = file(mod_file)
    file.eachLine { String s ->
        s = s.trim();
        if (s.startsWith(prefix)) {
            s = s.substring(prefix.length(), s.length() - 2);
            String[] pts = s.split("\\.");

            major = pts[0];
            revision = pts[1];
            patch = pts[2];
        }
    }
    return "$major.$revision.$patch";
}

task devJar(type: Jar) {
    description 'Creates a compiled version for other developers to use in their workspaces.'
    from sourceSets.main.output
    classifier = 'dev'
}

task sourceJar(type: Jar) {
    description 'Outputs the source code into a jar file.'
    from sourceSets.main.java
    from new File(root, "dev")
    classifier = 'src'
}

task buildAll(type: GradleBuild) {
    description "Runs all compile tasks(Doesn't build the fully compiled yet)"
    devJar.execute()
    sourceJar.execute()
}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'
                
        // replace version and mcversion
        expand 'version':project.version, 'mcversion':project.minecraft.version
    }
        
    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}
